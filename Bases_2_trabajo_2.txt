/*Se crea un VARRAY de máximo 4 elementos que guardará 
las coordenadas del rectángulo*/
DROP TYPE coord_varray FORCE;
CREATE OR REPLACE TYPE coord_varray AS 
VARRAY(4) OF NUMBER (4);
/

/*Se crea la clase de locales que tiene la info
de las coordenas deseadas y el precio dispuesto a pagar*/
DROP TYPE local_tip FORCE;
CREATE OR REPLACE TYPE local_tip AS OBJECT(
 coord coord_varray,
 precio NUMBER(15)
);
/

/*Se crea un VARRAY de máximo 4 elementos que guardará
los locales deseados*/
DROP TYPE local_varray FORCE;
CREATE OR REPLACE TYPE local_varray AS 
VARRAY(4) OF local_tip; --Si ingreso 5 o más locales sale el error ORA-22909: exceeded maximum VARRAY limit
/

/*Se crea la clase de oferentes que tiene la info
del identificador y nombre del oferente y los locales
deseados*/
DROP TYPE ofer_tip FORCE;
CREATE TYPE ofer_tip AS OBJECT(
 idOferente NUMBER(2),
 nombre VARCHAR2(90),
 locales local_varray
);
/

/*Se crea la tabla que guardará los oferentes*/
DROP TABLE oferente;
CREATE TABLE oferente OF ofer_tip (idOferente PRIMARY KEY,
locales NOT NULL);



/* Ejemplo de cómo insertar
INSERT INTO oferente VALUES(1, 'Noemi Wolfs',
 local_varray(local_tip(coord_varray(10,20,30,40),20),
              local_tip(coord_varray(30,20,50,10),12)
 )
);

Ejemplo para realizar consultas
SELECT idOferente, l.*
FROM oferente o, TABLE(o.locales) l;

SELECT idOferente, l.coord
FROM oferente o, TABLE(o.locales) l;
*/

--Trigger El máximo de oferentes es 5
CREATE OR REPLACE TRIGGER insertar1
BEFORE INSERT ON oferente
DECLARE
    total NUMBER(2);
BEGIN
    SELECT COUNT(*) INTO total FROM oferente;
    IF total = 5 THEN
        RAISE_APPLICATION_ERROR(-20564, 'No hay sitio para otro oferente');
    END IF;
END;
/

--Trigger Cada oferente solicite al menos un local
/*Caso:
INSERT INTO oferente VALUES(2, 'Noemi Wolfs',
 local_varray()
);*/
CREATE OR REPLACE TRIGGER insertar2
BEFORE INSERT ON oferente
FOR EACH ROW
DECLARE
 local_varr local_varray;
BEGIN
    SELECT :NEW.locales INTO local_varr FROM dual;
    IF local_varr.COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20564, 'Debes solicitar al menos un local');
    END IF;
END;
/

--Trigger No poner coordenadas incompletas
/*Caso:
INSERT INTO oferente VALUES(1, 'Noemi Wolfs',
 local_varray(local_tip(coord_varray(10,20,30,40),20),
              local_tip(coord_varray(30,20),12)
 )
);*/
CREATE OR REPLACE TRIGGER insertar3
BEFORE INSERT ON oferente
FOR EACH ROW
DECLARE
 local_varr local_varray;
BEGIN
    SELECT :NEW.locales INTO local_varr FROM dual;
    FOR i IN 1 .. local_varr.COUNT LOOP
        IF local_varr(i).coord.COUNT < 4 THEN
            RAISE_APPLICATION_ERROR(-20564, 'Debes poner cuatro coordenadas');
        END IF;
    END LOOP;
END;
/

--Trigger Las coordenadas de cada local no se salgan de las coordenadas del cuadrado del CC
/*Caso:
INSERT INTO oferente VALUES(1, 'Noemi Wolfs',
 local_varray(local_tip(coord_varray(10,20,30,40),20),
              local_tip(coord_varray(0,30,20,105),12)
 )
);*/
CREATE OR REPLACE TRIGGER insertar4
BEFORE INSERT ON oferente
FOR EACH ROW
DECLARE
 local_varr local_varray;
BEGIN
    SELECT :NEW.locales INTO local_varr FROM dual;
    FOR i IN 1 .. local_varr.COUNT LOOP
        IF local_varr(i).coord(1) < 0 THEN
            RAISE_APPLICATION_ERROR(-20564, 'Las coordenadas se salen del CC');
        END IF;
        IF local_varr(i).coord(2) < 0 THEN
            RAISE_APPLICATION_ERROR(-20564, 'Las coordenadas se salen del CC');
        END IF;
        IF local_varr(i).coord(3) > 100 THEN
            RAISE_APPLICATION_ERROR(-20564, 'Las coordenadas se salen del CC');
        END IF;
        IF local_varr(i).coord(4) > 100 THEN
            RAISE_APPLICATION_ERROR(-20564, 'Las coordenadas se salen del CC');
        END IF;
    END LOOP;
END;
/
